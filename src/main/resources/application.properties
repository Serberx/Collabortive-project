#spring.datasource.url=jdbc:postgresql://localhost:33333/mydatabase
#spring.datasource.username=myuser
#spring.datasource.password=secret
#spring.jpa.show-sql=true
#spring.jpa.generate-ddl=false
#spring.jpa.hibernate.ddl-auto=validate
#spring.jpa.properties.hibernate.format_sql=true
#spring.datasource.driver-class-name=org.postgresql.Driver
#----------------------------------------------------------------------------------- IN USE
#spring.datasource.url=jdbc:postgresql://localhost:33333/test
#spring.datasource.username=test
#spring.datasource.password=test
#spring.jpa.show-sql=true
#spring.jpa.generate-ddl=false
#spring.jpa.hibernate.ddl-auto=validate
#spring.jpa.properties.hibernate.format_sql=true
#spring.datasource.driver-class-name=org.postgresql.Driver

#schema erzeugen, danach ausklammern. code down below.

#To control which DDL commands we`ll generate -> https://www.baeldung.com/spring-data-jpa-generate-db-schema
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#
##For each specified script action, we`ll need to define the corresponding target configuration: -> https://www.baeldung.com/spring-data-jpa-generate-db-schema
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=V1.0.0__initialize-schema.sql
#spring.jpa.properties.javax.persistence.schema-generation.scripts.drop-target=schema.sql
#
##Finally, to generate the schema DDL commands from our entity models, we should include the schema source configurations with the metadata option selected: -> https://www.baeldung.com/spring-data-jpa-generate-db-schema
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata

#-----------------------------------------------------------------------------------
#Oracle##Oracle##
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database=oracle
#spring.datasource.url=jdbc:tc:oracle:21-slim-faststart:://localhost:55555/XE
spring.datasource.url=jdbc:oracle:thin:@//localhost:33445/XEPDB1
spring.datasource.username=quzu
spring.datasource.password=savas
spring.jpa.hibernate.ddl-auto=validate
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.OracleDialect
spring.test.database.replace=none

spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=resources/db/migration
spring.jpa.properties.persistence.sql-load-script-source=resources/db/migration/V1.0.1__initialize-schema.sql

##Welche statements erzeugt werden sollen aus domain klassen:
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create

##Wie unser, mit dem oberhalb erzeugten, befehl heissen soll:
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=V1.0.1__initialize-schema.sql

#spring.jpa.properties.javax.persistence.schema-generation.database.action=create

## Wovon soll es erzeugt werden:
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
#-----------------------------------------------------------------------------------

##From comilition
##spring.profiles.active=@profileActive@
##server.port=${PORT:8080}
#logging.level.org.atmosphere = warn
#spring.mustache.check-template-location = false
#
## Launch the default browser when starting the application in development mode
##vaadin.launch-browser=true
## To improve the performance during development.
## For more information https://vaadin.com/docs/flow/spring/tutorial-spring-configuration.html#special-configuration-parameters
##vaadin.whitelisted-packages = com.vaadin,org.vaadin,dev.hilla,com.example.application
#spring.jpa.defer-datasource-initialization = true
#spring.sql.init.mode = always
#
#
##Database
#
##spring.datasource.url=jdbc:oracle:thin:@//localhost:45678/XE
#spring.datasource.url=jdbc:oracle:thin:@localhost:45678:XE
#spring.datasource.username=UserDB
#spring.datasource.password=secret
#spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
#
##spring.datasource.hikari.minimumIdle=5
##spring.datasource.hikari.maximumPoolSize=20
##spring.datasource.hikari.idleTimeout=30000
##spring.datasource.hikari.maxLifetime=2000000
##spring.datasource.hikari.connectionTimeout=30000
##spring.datasource.hikari.poolName=HikariPoolBooks
#
#spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
#spring.jpa.hibernate.ddl-auto=create-drop
#
##logging.file.name=test.log

#------------------------------------------------------------------------------------
#spring.jpa.database=oracle
#spring.datasource.url=jdbc:oracle:thin:@gvenzl/oracle-xe://localhost:55555/XE
#spring.datasource.username=oracle
#spring.datasource.password=oracle
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.OracleDialect
#spring.test.database.replace=none
#------------------------------------------------------------------------------------

#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update
#




#spring.datasource.url=jdbc:postgresql:file:~/OneDrive/Spengergasse/7ABIF/POS/programmge_storage/pos_project_sam_2/sj2324-7abcif-pos1-java-sam_ic/src/main/resources/db/migration/V1.0.0__initialize-schema.sql
#spring.jpa.hibernate.ddl-auto = update

#spring.flyway.locations=classpath:db/migration

#spring.jpa.generate-ddl=true

#To control which DDL commands we`ll generate -> https://www.baeldung.com/spring-data-jpa-generate-db-schema
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#
##For each specified script action, we`ll need to define the corresponding target configuration: -> https://www.baeldung.com/spring-data-jpa-generate-db-schema
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=V1.0.0__initialize-schema.sql
##spring.jpa.properties.javax.persistence.schema-generation.scripts.drop-target=schema.sql
#
##Finally, to generate the schema DDL commands from our entity models, we should include the schema source configurations with the metadata option selected: -> https://www.baeldung.com/spring-data-jpa-generate-db-schema
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata



####################### H2 DB configs
#
#server.port=${PORT:8041}
#logging.level.root=info
#logging.level.at.spengergasse=debug
#
#logging.level.org.atmosphere = warn
#spring.mustache.check-template-location = false
#
#
#spring.jpa.defer-datasource-initialization = true
#spring.sql.init.mode = always
#
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.database= H2
#spring.jpa.show-sql= true
#spring.jpa.hibernate.dialect=org.hibernate.dialect.H2Dialect
#
### DB Konfiguration
#spring.datasource.url=jdbc:h2:file:~/OneDrive/Spengergasse/7ABIF/POS/programmge_storage/pos_project_sam_2
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
## never use a password in properties!!! -> set env variables!
#
## DB - Aktivieren der H2 Webkonsole
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#
#
## Upload file size
#spring.servlet.multipart.max-file-size=12MB
#spring.servlet.multipart.max-request-size=12MB
