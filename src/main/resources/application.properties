#spring.datasource.url=jdbc:postgresql://localhost:33333/mydatabase
#spring.datasource.username=myuser
#spring.datasource.password=secret
#spring.jpa.show-sql=true
#spring.jpa.generate-ddl=false
#spring.jpa.hibernate.ddl-auto=validate
#spring.jpa.properties.hibernate.format_sql=true
#spring.datasource.driver-class-name=org.postgresql.Driver
#-----------------------------------------------------------------------------------
#spring.datasource.url=jdbc:postgresql://localhost:33334/test
#spring.datasource.username=test
#spring.datasource.password=test
#spring.jpa.show-sql=true
#spring.jpa.generate-ddl=false
#spring.jpa.hibernate.ddl-auto=validate
#spring.jpa.properties.hibernate.format_sql=true
#spring.datasource.driver-class-name=org.postgresql.Driver

#schema erzeugen, danach ausklammern. code down below.

#To control which DDL commands we`ll generate -> https://www.baeldung.com/spring-data-jpa-generate-db-schema
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#
##For each specified script action, we`ll need to define the corresponding target configuration: -> https://www.baeldung.com/spring-data-jpa-generate-db-schema
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=V1.0.0__initialize-schema.sql
##spring.jpa.properties.javax.persistence.schema-generation.scripts.drop-target=schema.sql
#
##Finally, to generate the schema DDL commands from our entity models, we should include the schema source configurations with the metadata option selected: -> https://www.baeldung.com/spring-data-jpa-generate-db-schema
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata

#-----------------------------------------------------------------------------------

spring.flyway.baseline-on-migrate=true
spring.datasource.url=jdbc:oracle:thin:@localhost:55556:XE
spring.datasoorce.
spring.datasource.username=system
spring.datasource.password=oracle
spring.jpa.show-sql=true
spring.jpa.generate-ddl=false
#spring.jpa.hibernate.ddl-auto=validate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
#-----------------------------------------------------------------------------------



#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update
#




#spring.datasource.url=jdbc:postgresql:file:~/OneDrive/Spengergasse/7ABIF/POS/programmge_storage/pos_project_sam_2/sj2324-7abcif-pos1-java-sam_ic/src/main/resources/db/migration/V1.0.0__initialize-schema.sql
#spring.jpa.hibernate.ddl-auto = update

#spring.flyway.locations=classpath:db/migration

#spring.jpa.generate-ddl=true

#To control which DDL commands we`ll generate -> https://www.baeldung.com/spring-data-jpa-generate-db-schema
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#
##For each specified script action, we`ll need to define the corresponding target configuration: -> https://www.baeldung.com/spring-data-jpa-generate-db-schema
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=V1.0.0__initialize-schema.sql
##spring.jpa.properties.javax.persistence.schema-generation.scripts.drop-target=schema.sql
#
##Finally, to generate the schema DDL commands from our entity models, we should include the schema source configurations with the metadata option selected: -> https://www.baeldung.com/spring-data-jpa-generate-db-schema
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata



####################### H2 DB configs
#
#server.port=${PORT:8041}
#logging.level.root=info
#logging.level.at.spengergasse=debug
#
#logging.level.org.atmosphere = warn
#spring.mustache.check-template-location = false
#
#
#spring.jpa.defer-datasource-initialization = true
#spring.sql.init.mode = always
#
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.database= H2
#spring.jpa.show-sql= true
#spring.jpa.hibernate.dialect=org.hibernate.dialect.H2Dialect
#
### DB Konfiguration
#spring.datasource.url=jdbc:h2:file:~/OneDrive/Spengergasse/7ABIF/POS/programmge_storage/pos_project_sam_2
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
## never use a password in properties!!! -> set env variables!
#
## DB - Aktivieren der H2 Webkonsole
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#
#
## Upload file size
#spring.servlet.multipart.max-file-size=12MB
#spring.servlet.multipart.max-request-size=12MB
